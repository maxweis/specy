#!/bin/bash


#specy: an Arch Linux system command line description tool

#Copyright (C) 2014-2015  Max Weis


#getwm() function and wm_names were modified from screenFetch which is licensed under GPLv3
#Copyright (C) 2010-2014 Brett Bohnenkamper <kittykatt@kittykatt.us>

#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 3
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.


#TODO:
#add drive details including fs, percentage used, size, usage, and mount point (in bash)


wm_names=( gnome-shell fluxbox openbox blackbox xfwm4 metacity kwin icewm pekwm fvwm dwm awesome wmaker stumpwm musca xmonad i3 ratpoison scrotwm spectrwm wmfs wmii beryl subtle e16 enlightenment sawfish emerald monsterwm dminiwm compiz Finder herbstluftwm notion bspwm cinnamon 2bwm echinus swm budgie-wm )

getwm(){ #inspired by screenFetch (see above for copyright detail)
        if [ -n "$DISPLAY" ]; then
                for each in "${wm_names[@]}"; do
                        PID="$(pgrep -f $each)"
                        if [ "$PID" ]; then
                                case $each in
					'*') WM="None (virtual terminal)";;
                                        '2bwm') WM="2bwm";;
                                        'awesome') WM="Awesome";;
                                        'beryl') WM="Beryl";;
                                        'bspwm') WM="bspwm";;
                                        'blackbox') WM="BlackBox";;
                                        'budgie-wm') WM="BudgieWM";;
                                        'cinnamon') WM="Muffin";;
                                        'compiz') WM="Compiz";;
                                        'dminiwm') WM="dminiwm";;
                                        'dwm') WM="dwm";;
                                        'e16') WM="E16";;
                                        'emerald') WM="Emerald";;
                                        'enlightenment') WM="E17";;
                                        'fluxbox') WM="FluxBox";;
                                        'fvwm') WM="FVWM";;
                                        *'gala'*) WM="Gala";;
                                        'gnome-shell') WM="Mutter";;
                                        'herbstluftwm') WM="herbstluftwm";;
                                        'icewm') WM="IceWM";;
                                        'kwin') WM="KWin";;
                                        'metacity') WM="Metacity";;
                                        'monsterwm') WM="monsterwm";;
                                        'musca') WM="Musca";;
                                        'mutter'*) WM="Mutter";;
                                        'notion') WM="Notion";;
                                        'openbox') WM="OpenBox";;
                                        'pekwm') WM="PekWM";;
                                        'ratpoison') WM="Ratpoison";;
                                        'sawfish') WM="Sawfish";;
                                        'scrotwm') WM="ScrotWM";;
                                        'spectrwm') WM="SpectrWM";;
                                        'stumpwm') WM="StumpWM";;
                                        'subtle') WM="subtle";;
                                        'swm') WM="swm";;
                                        'wmaker') WM="WindowMaker";;
                                        'wmfs') WM="WMFS";;
                                        'wmii') WM="wmii";;
                                        'xfwm4') WM="Xfwm4";;
                                        'i3') WM="i3";;
                                        'xmonad') WM="XMonad";;
                                esac
                        fi
			
			if [ -n "$WM" ]; then
		break
			fi
                done
	else
		WM="None (virtual terminal)"
        fi
}

declare -a field1
declare -a field2
n=0

config(){
        if ! [ -f "$HOME/.config/specy/config" ]; then
	        echo
	        echo -e "specy; an Arch Linux system command line description output tool\n\n"
		echo -e "Copyright (C) 2014-2015 Max Weis\n"
		echo -e "This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.\n"
		echo -e "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n"
	
	        if ! [ -d "$HOME/.config/specy" ]; then
	                mkdir $HOME/.config/specy
	        fi
	
	        echo Your GPU model:  
	        read gpu
	        echo $gpu >> $HOME/.config/specy/config
	        echo 
	
	        if ! [ -n "$EDITOR" ]; then
	                echo Your preferred text editor:  
	                read editor
	        fi
	        echo $editor >> $HOME/.config/specy/config
	fi


        echo -e "Show user? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="User: "
                field2[n]="user"
                ((n++))
        fi


        echo -e "Show OS? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="OS: "
                field2[n]="os"
                ((n++))
        fi


        echo -e "Show uptime? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Uptime: "
                field2[n]="timeup"
                ((n++))
        fi


        echo -e "Show kernel? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Kernel: "
                field2[n]="kernel"
                ((n++))
        fi


        echo -e "Show CPU? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="CPU: "
                field2[n]="cpu"
                ((n++))
        fi


        echo -e "Show GPU? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="GPU: "
                field2[n]="gpu"
                ((n++))
        fi


        echo -e "Show RAM? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="RAM: "
                field2[n]="ram"
                ((n++))
        fi


        echo -e "Show display environment? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Display\ environment: "
                field2[n]="display_environment"
                ((n++))
        fi


        echo -e "Show window manager? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Window\ manager: "
                field2[n]="window_manager"
                ((n++))
        fi


        echo -e "Show terminal? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Terminal: "
                field2[n]="TERM"
                ((n++))
        fi


        echo -e "Show shell? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Shell: "
                field2[n]="shell"
                ((n++))
        fi


        echo -e "Show amount of packages? [y/n]"
        read choice
        echo

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Packages: "
                field2[n]="packages"
                ((n++))
        fi


        echo -e "Show text editor? [y/n]"
        read choice

        if [ $choice = "Y" ] || [ $choice = "y" ]; then
                field1[n]="Editor: "
                field2[n]="editor"
                ((n++))
        fi


        echo -n "field1=(" > $HOME/.config/specy/output
        n=0

        for option in  "${field1[@]}"; do
                echo -n "${field1[n]} " >> $HOME/.config/specy/output
                ((n++))
        done

        echo ")" >> $HOME/.config/specy/output

        echo -n "field2=(" >> $HOME/.config/specy/output

        n=0

        for option in "${field2[@]}"; do
                echo -n "${field2[n]} " >> $HOME/.config/specy/output
                ((n++))
        done

        echo -n ")" >> $HOME/.config/specy/output
        
        
	echo Finished configuration.
	echo -e "Reconfigure by passing the -r or --reconfigure argument\n"
}

#COLOR DEFINITIONS
intense_blue='\e[0;94m'
blue='\e[0;34m'
white='\e[1;37m'
gray='\e[0;37m'
dark_gray='\e[1;30m'
light_blue='\e[1;34m'
black='\e[0;30m'
green='\e[0;32m'
cyan='\e[0;36m'
red='\e[0;31m'
purple='\e[0;35m'
brown='\e[0;33m'
light_green='\e[1;32m'
light_cyan='\e[1;36m'
light_red='\e[1;31m'
light_purple='\e[1;31m'
yellow='\e[1;31m'
no_color='\e[0m'

if ! [ -f "$HOME/.config/specy/output" ]; then
        config
fi

source $HOME/.config/specy/output

user=$(whoami)@$(hostname)

os="Arch Linux"

kernel=$(uname -r)

timeup=$(uptime -p)
timeup=${timeup:3}

cpu=$(grep "model name" /proc/cpuinfo | cut -f2 -d: | tail -1)
cpu=${cpu:1}
cpu=$(echo $cpu | tr '\n' ' ')

gpu=$(sed '1q;d' $HOME/.config/specy/config)

total_ram="$(free -h | awk '/Mem/ {print $2}')"
used_ram="$(free -h | awk '/Mem/ {print $3}')"
percent_ram="$(free | awk '/Mem/ {printf("%d%%", $3/$2 * 100)}')"
ram="$used_ram / $total_ram ($percent_ram)"

getwm
window_manager="$WM"

if ! [ -n $XDG_CURRENT_DESKTOP ]; then
display_environment=$XDG_CURRENT_DESKTOP
else
	display_environment="None"
fi

shell="${SHELL##*/}"

packages="$(pacman -Q | wc -l)"

if [ -n "$EDITOR" ]; then
	editor="$EDITOR"
else
	editor="$(sed '2q;d' $HOME/.config/specy/config)"
fi


gpu_text_width=${#gpu}
cpu_text_width=${#cpu}
terminal_height=$(tput lines)
terminal_width=$(tput cols)
height_limit=24

# determining terminal width from longest strings
if [ $gpu_text_width -ge  $cpu_text_width ]; then
        width_limit=$(( $gpu_text_width + 47 ))
else
        width_limit=$(( $cpu_text_width + 47 ))
fi

line1A="${field1[0]} "
line1B="${!field2[0]}"
line2A="${field1[1]} "
line2B="${!field2[1]}"
line3A="${field1[2]} "
line3B="${!field2[2]}"
line4A="${field1[3]} "
line4B="${!field2[3]}"
line5A="${field1[4]} "
line5B="${!field2[4]}"
line6A="${field1[5]} "
line6B="${!field2[5]}"
line7A="${field1[6]} "
line7B="${!field2[6]}"
line8A="${field1[7]} "
line8B="${!field2[7]}"
line9A="${field1[8]} "
line9B="${!field2[8]}"
line10A="${field1[9]} "
line10B="${!field2[9]}"
line11A="${field1[10]} "
line11B="${!field2[10]}"
line12A="${field1[11]} "
line12B="${!field2[11]} "
line13A="${field1[12]}"
line13B="${!field2[12]} "
line14A="${field1[13]}"
line14B="${!field2[13]} "
line15A="${field1[14]}"
line15B="${!field2[14]} "
line16A="${field1[15]}"
line16B="${!field2[16]} "

# arch_logo(primary_color, secondary_color, primary_text_color, secondary_text_color)
arch_logo(){
    clear
    echo
    echo -e -n "$2"
    echo -e -n "                   /\                    " 
    echo
    echo -e -n "                  /$1##$2\                   " 
    echo
    echo -e -n "                 /$1####$2\                  $3$line1A$4$line1B$2" 
    echo
    echo -e -n "                /$1######$2\                 $3$line2A$4$line2B$2"  
    echo
    echo -e -n "               /$1########$2\                $3$line3A$4$line3B$2"   
    echo
    echo -e -n "               \\\\$1#########$2\               $3$line4A$4$line4B$2"  
    echo
    echo -e -n "             /\_\\\\$1#########$2\              $3$line5A$4$line5B$2"  
    echo
    echo -e -n "            /$1###$2\|$1#########$2\             $3$line6A$4$line6B$2"  
    echo
    echo -e -n "           /$1################$2\            $3$line7A$4$line7B$2"  
    echo
    echo -e -n "          /$1######$2######$1###$2/\\\\$1#$2\           $3$line8A$4$line8B$2"  
    echo
    echo -e -n "         /$1#####$2###    ###$1#$2\ \\\\$1#$2\          $3$line9A$4$line9B$2"  
    echo
    echo -e -n "        /$1#####$2##        ##$1##$2\___         $3$line10A$4$line10B$2"  
    echo
    echo -e -n "       /$1#####$2##          ##$1#####$2\        $3$line11A$4$line11B$2"  
    echo
    echo -e -n "      /$1######$2##          ##$1######$2\       $3$line12A$4$line12B$2"  
    echo
    echo -e -n "     /$1######$2####        ####$1######$2\      $3$line13A$4$line13B$2"  
    echo
    echo -e -n "    /$1###$2#####              #####$1###$2\     $3$line14A$4$line14B$2"  
    echo
    echo -e -n "   /$1#$2####                      ####$1#$2\    $3$line15A$4$line15B$2"  
    echo
    echo -e -n "   $2###                            ###   "  
    echo
    echo -e -n "  $2##                                ##  " 
    echo
    echo -e -n " $2#                                    # " 
    echo -e  $no_color
    echo
}

arch_logo_minimal(){
    clear
    echo
    echo -e -n "$2"
    echo -e -n "                   /\ " 
    echo
    echo -e -n "                  /$1##$2\ " 
    echo
    echo -e -n "                 /$1####$2\ " 
    echo
    echo -e -n "                /$1######$2\ "  
    echo
    echo -e -n "               /$1########$2\ "   
    echo
    echo -e -n "               \\\\$1#########$2\ "  
    echo
    echo -e -n "             /\_\\\\$1#########$2\ "  
    echo
    echo -e -n "            /$1###$2\|$1#########$2\ "  
    echo
    echo -e -n "           /$1################$2\ "  
    echo
    echo -e -n "          /$1######$2######$1###$2/\\\\$1#$2\ "  
    echo
    echo -e -n "         /$1#####$2###    ###$1#$2\ \\\\$1#$2\ "  
    echo
    echo -e -n "        /$1#####$2##        ##$1##$2\___"  
    echo
    echo -e -n "       /$1#####$2##          ##$1#####$2\ "  
    echo
    echo -e -n "      /$1######$2##          ##$1######$2\ "  
    echo
    echo -e -n "     /$1######$2####        ####$1######$2\ "  
    echo
    echo -e -n "    /$1###$2#####              #####$1###$2\ "  
    echo
    echo -e -n "   /$1#$2####                      ####$1#$2\ "  
    echo
    echo -e -n "   $2###                            ###"  
    echo
    echo -e -n "  $2##                                ##" 
    echo
    echo -e -n " $2#                                    #" 
    echo -e  $no_color
    echo
}

if [ "$1" = "--reconfigure" ] || [ "$1" = "-r" ]; then
        if [ -d "$HOME/.config/specy" ]; then
                rm $HOME/.config/specy/*
                echo Configuration reset
        fi

elif [ "$1" = "--dimensions" ] || [ "$1" = "-d" ]; then
        echo "Minimum dimensions for full display: $width_limit columns and $height_limit rows"
        echo "Minimum dimensinos for minimal display: 40 columns and 23 rows"

elif [ $# != 4 ] && [ $# != 0 ]; then
        echo -e Four colors must be specified or leave defaults\\nOptions are intense_blue, blue, white, gray, dark_grey, light_blue, black, green, cyan, red, purple, brown, light_green, light_cyan, light_red, light_purple, yellow, no_color
        echo -e '\n'
        echo Usage: $0  [-r] [-m] primary_logo_color secondary_logo_color primary_text_color secondary_text_color
        echo Options:
        echo -r or --reconfigure	reset specy setup
        echo 
        echo -d or --dimensions		print dimensions required for display

elif [ "$terminal_width" -ge "$width_limit" ] && [ "$terminal_height" -ge "$height_limit" ]; then
        if [ $# = 4 ]; then
                arch_logo ${!1} ${!2} ${!3} ${!4} 
        else
                arch_logo $blue $light_blue $light_blue $white
        fi

elif [ "$terminal_width" -ge 40 ] && [ "$terminal_height" -ge 23 ]; then
        if [ $# = 4 ]; then
                arch_logo_minimal ${!1} ${!2} ${!3} ${!4} 
        else
                arch_logo_minimal $blue $light_blue $blue $gray
        fi
fi
